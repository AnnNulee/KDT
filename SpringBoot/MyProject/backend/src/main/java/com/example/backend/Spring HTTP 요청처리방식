처음에 이니셜라이즈로 만들어진건 백엔드와 config.
그 다음에 controller-service-repository // dto
그리고 domain













Spring Framework가 HTTP 요청을 처리하는 방식
 Spring은 클라이언트로부터 HTTP 요청을 받으면, 그 요청을 컨트롤러의 메서드에 바인딩할 수 있도록
 요청 데이터를 Java 객체로 변환하는 작업을 합니다.
 여기서 @RequestBody 어노테이션이 중요한 역할을 합니다.

@RequestBody와 DTO의 역할 및 생성 과정
1. 클라이언트가 서버로 데이터를 포함한 POST 요청을 보냄 // ex) 사용자 생성을 위한 JSON 형식의 데이터가 포함된 요청
2. Spring의 디스패처 서블릿(Dispatcher Servlet)이 이 HTTP 요청을 받습니다.
3. @RequestBody 어노테이션은 요청의 본문(body)을 Java 객체로 변환하도록 지시합니다.
   - JSON으로부터 받은 데이터가 UserCreateRequest 타입의 객체로 자동 변환.
            이 변환 과정은 Spring의 HTTP 메시지 컨버터(Message Converter)에 의해 처리.
            가장 흔히 사용되는 메시지 컨버터는 MappingJackson2HttpMessageConverter,
            이 컨버터는 JSON 데이터를 Java 객체로 직렬화 및 역직렬화합니다.
4. JSON 데이터가 UserCreateRequest 클래스의 생성자를 통해 새로운 객체를 생성. (필요에 따라 세터 메서드를 사용하여 객체를 채웁)
5. 생성된 UserCreateRequest 객체는 saveUser 메서드의 인수로 전달됩니다.

컨트롤러 메서드 실행: 이제 saveUser 메서드 내에서 UserCreateRequest 객체가 사용될 준비가 완료되었으며, 이 객체를 사용하여 필요한 비즈니스 로직을 수행할 수 있습니다.

요약
따라서, @RequestBody 어노테이션을 사용하면, Spring은 클라이언트로부터 받은 JSON 데이터를 자동으로 해당 Java 타입(UserCreateRequest DTO)의 객체로 변환해 줍니다. 이 과정은 컨트롤러가 요청을 받을 때마다 동적으로 일어나며, 변환된 객체는 메서드의 파라미터로 직접 전달되어 사용됩니다. 이렇게 Spring이 요청 데이터를 객체로 매핑하는 기능 덕분에, 개발자는 데이터 처리를 보다 쉽게 구현할 수 있습니다.




        // static : 원래는 객체생성 해야 객체가 로드 되어 내부의 method를 쓸 수 있지만, static의 경우 생성하지 않아도 method를 사용할 수 있다.
        // 그런데 여기서는 static 지정을 하지 않아도 가져다 쓸 수 있다고



// 스프링서버가 실행되면 컨테이너가 생성된다.
// 어노테이션이 박힌 클래스들은 컨테이너에 bean으로 저장된다.
// bean에 등록된 클래스들은 생성하지 않고도 꺼내쓸 수 있다.
// 디펜던시에 있는 것들 또한 bean에 등록된다.
// bean에 있는디펜던시는 bean에 등록된 애들끼리만 불러서 사용 가능하다.